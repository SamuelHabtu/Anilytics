/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const RecommendationsLazyImport = createFileRoute('/recommendations')()
const ProfileLazyImport = createFileRoute('/profile')()

// Create/Update Routes

const RecommendationsLazyRoute = RecommendationsLazyImport.update({
  path: '/recommendations',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/recommendations.lazy').then((d) => d.Route),
)

const ProfileLazyRoute = ProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/recommendations': {
      id: '/recommendations'
      path: '/recommendations'
      fullPath: '/recommendations'
      preLoaderRoute: typeof RecommendationsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof ProfileLazyRoute
  '/recommendations': typeof RecommendationsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/profile': typeof ProfileLazyRoute
  '/recommendations': typeof RecommendationsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/profile': typeof ProfileLazyRoute
  '/recommendations': typeof RecommendationsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/profile' | '/recommendations'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/profile' | '/recommendations'
  id: '__root__' | '/' | '/profile' | '/recommendations'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  RecommendationsLazyRoute: typeof RecommendationsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  RecommendationsLazyRoute: RecommendationsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/profile",
        "/recommendations"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    },
    "/recommendations": {
      "filePath": "recommendations.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
